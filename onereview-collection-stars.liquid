<script id="OneReviewCollection" type="application/json">
    {
      "collection": {{ collection | json }},
      "products": [
        {% for product in products %}
          {
            "id": {{ product.id }},
            "title": "{{ product.title }}",
            "average_rating": {% if product.metafields.review_summary.published.value == true %}
              {{ product.metafields.review_summary.average_rating.value | round: 1 }}
            {% else %}
              0
            {% endif %},
            "review_count": {% if product.metafields.review_summary.published.value == true %}
              "{{ product.metafields.review_summary.average_rating_review_count.value | default: '0' }}"
            {% else %}
              "0" 
            {% endif %}
          }
          {% unless forloop.last %},{% endunless %}
        {% endfor %}
      ]
    }
</script>

<script id="OneReviewCollectionStars" type="application/javascript">
  console.log('onereview-collection-stars.js loaded')

  function createOneReviewStars() {
    let data
    const oneReviewCollectionElement = document.getElementById('OneReviewCollection')
    if (oneReviewCollectionElement) {
      data = JSON.parse(oneReviewCollectionElement.text)
    } else {
      console.log('Element #OneReviewCollection not found!')
    }

    console.log('oneReviewCollectionElement:', data)

    data.products.forEach((product) => {
      if ((product.average_rating === 0 && !data.empty_products) || !data.all_reviewed_products) {
        return
      }

      const existingStars = document.querySelector(`.onereview-stars[data-product-id='${product.id}']`)

      if (existingStars) {
        return
      }

      const stars = createCollectionStarElement(product)

      const titleElement = findFirstElementWithText(product.title)

      if (titleElement) {
        const priceContainer = findFirstLevelPriceContainer(titleElement)

        if (priceContainer) {
          insertBefore(priceContainer, applyCenterIfSiblingsCentered(stars, priceContainer))
        } else {
          const priceContainer = findSecondLevelPriceContainer(titleElement)
          insertBefore(priceContainer, applyCenterIfSiblingsCentered(stars, priceContainer))
        }
      }
    })

    function createCollectionStarElement(product) {
      const stars = document.createElement('div')
      stars.className = 'onereview-stars'
      stars.setAttribute('data-product-id', product.id)
      const rating = document.createElement('span')
      rating.className = 'onereview-rating'
      rating.textContent = product.average_rating.toFixed(1)

      if (product.average_rating !== 0) {
        stars.appendChild(rating)
      }

      for (let i = 1; i <= 5; i++) {
        const star = document.createElement('span')
        if (i <= product.average_rating) {
          star.innerHTML =
            '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z" fill="currentColor"/></svg>'
        } else if (i - 0.7 <= product.average_rating) {
          star.innerHTML =
            '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M288 376.4l.1-.1 26.4 14.1 85.2 45.5-16.5-97.6-4.8-28.7 20.7-20.5 70.1-69.3-96.1-14.2-29.3-4.3-12.9-26.6L288.1 86.9l-.1 .3V376.4zm175.1 98.3c2 12-3 24.2-12.9 31.3s-23 8-33.8 2.3L288.1 439.8 159.8 508.3C149 514 135.9 513.1 126 506s-14.9-19.3-12.9-31.3L137.8 329 33.6 225.9c-8.6-8.5-11.7-21.2-7.9-32.7s13.7-19.9 25.7-21.7L195 150.3 259.4 18c5.4-11 16.5-18 28.8-18s23.4 7 28.8 18l64.3 132.3 143.6 21.2c12 1.8 22 10.2 25.7 21.7s.7 24.2-7.9 32.7L438.5 329l24.6 145.7z" fill="currentColor"/></svg>'
        } else {
          star.innerHTML =
            '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M287.9 0c9.2 0 17.6 5.2 21.6 13.5l68.6 141.3 153.2 22.6c9 1.3 16.5 7.6 19.3 16.3s.5 18.1-5.9 24.5L433.6 328.4l26.2 155.6c1.5 9-2.2 18.1-9.7 23.5s-17.3 6-25.3 1.7l-137-73.2L151 509.1c-8.1 4.3-17.9 3.7-25.3-1.7s-11.2-14.5-9.7-23.5l26.2-155.6L31.1 218.2c-6.5-6.4-8.7-15.9-5.9-24.5s10.3-14.9 19.3-16.3l153.2-22.6L266.3 13.5C270.4 5.2 278.7 0 287.9 0zm0 79L235.4 187.2c-3.5 7.1-10.2 12.1-18.1 13.3L99 217.9 184.9 303c5.5 5.5 8.1 13.3 6.8 21L171.4 443.7l105.2-56.2c7.1-3.8 15.6-3.8 22.6 0l105.2 56.2L384.2 324.1c-1.3-7.7 1.2-15.5 6.8-21l85.9-85.1L358.6 200.5c-7.8-1.2-14.6-6.1-18.1-13.3L287.9 79z" fill="currentColor"/></svg>'
        }
        stars.appendChild(star)
      }

      const reviewCount = document.createElement('span')
      reviewCount.className = 'onereview-reviewCount'
      reviewCount.textContent = `(${product.review_count})`

      if (product.average_rating !== 0) {
        stars.appendChild(reviewCount)
      }

      return stars
    }

    function findFirstLevelPriceContainer(titleElement) {
      const siblings = Array.from(titleElement.parentNode.children).filter(
        (child) => child !== titleElement
      )

      for (const sibling of siblings) {
        if (Array.from(sibling.classList).some((className) => className.includes('price'))) {
          return sibling
        }

        const priceElement = Array.from(sibling.querySelectorAll('*')).find((child) =>
          Array.from(child.classList).some((className) => className.includes('price'))
        )

        if (priceElement) {
          return priceElement
        }
      }
      return null
    }

    function findSecondLevelPriceContainer(titleElement) {
      secondLevelSiblings = Array.from(titleElement.parentNode.parentNode.children).filter(
        (child) => child !== titleElement.parentNode
      )

      for (const sibling of secondLevelSiblings) {
        const priceElement = Array.from(sibling.querySelectorAll('*')).find((child) =>
          Array.from(child.classList).some((className) => className.includes('price'))
        )

        if (priceElement) {
          return priceElement
        }
      }
    }

    /**
    * Finds the first heading or paragraph element that contains the specified text.
    *
    * @param {string} text - The text to search for within the headings or paragraphs.
    *
    * @returns {Element} - The first matching element
    */
    function findFirstElementWithText(text) {
      const elements = findElementsWithText(text)
      if (elements.length > 1) {
        return elements.length > 0 ? elements[1] : null
      } else if (elements.length > 0) {
        return elements.length > 0 ? elements[0] : null
      }
    }

    /**
    * Finds all heading or paragraph element that contains the specified text.
    *
    * @param {string} text - The text to search for within the headings or paragraphs.
    *
    * @returns {Array} - An array of matching elements
    */
    function findElementsWithText(text) {
      if (typeof text !== 'string') {
        throw new Error('The argument must be a string representing the text to search for.')
      }

      const selectors = 'h1, h2, h3, h4, h5, h6, p, span'

      const elements = Array.from(document.querySelectorAll(selectors))
      return elements.filter((element) => {
        if (element.textContent.includes(text)) {
          return element.textContent.replace(/\s+/g, '') === text.replace(/\s+/g, '')
        }
      })
    }

    /**
    * Insert a new element after a reference element.
    *
    * @param {Element} referenceNode - The text to search for within the headings or paragraphs.
    * @param {Element} newNode - The text to search for within the headings or paragraphs.
    *
    * @returns {void}
    */
    function insertBefore(referenceNode, newNode) {
      referenceNode.parentNode.insertBefore(newNode, referenceNode) // Insert newNode before referenceNode
    }

    function applyCenterIfSiblingsCentered(element, parent) {
      const style = window.getComputedStyle(parent)

      if (
        (style.display === 'flex' && style.justifyContent === 'center') ||
        style.textAlign === 'center'
      ) {
        element.style.display = 'flex'
        element.style.justifyContent = 'center'
      }

      return element
    }
  }

  document.addEventListener('DOMContentLoaded', function () {
    console.log(document.querySelector('.review-stars-loaded'))

    if (!document.querySelector('.review-stars-loaded')) {
      createOneReviewStars()
      const markerDiv = document.createElement('div')
      markerDiv.classList.add('review-stars-loaded')
      markerDiv.style.display = 'none'
      document.body.appendChild(markerDiv)
    }
  })
</script>

<style>
  .onereview-stars {
    display: flex;
    align-items: center;
    --onereview-star-color: #fdb731;
    height: 1.8em;
  }

  .onereview-stars svg {
    display: block;
    width: 1.2em;
    height: 1.2em;
    color: var(--onereview-star-color);
  }

  .onereview-rating {
    margin-right: 0.3em;
    flex-shrink: 0;
  }

  .onereview-reviewCount {
    margin-left: 0.3em;
    flex-shrink: 0;
  }

  @media (max-width: 600px) {
    .onereview-stars {
      font-size: 0.9em;
    }
  }
</style>
